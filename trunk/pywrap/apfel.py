# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_apfel', [dirname(__file__)])
        except ImportError:
            import _apfel
            return _apfel
        if fp is not None:
            try:
                _mod = imp.load_module('_apfel', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _apfel = swig_import_helper()
    del swig_import_helper
else:
    import _apfel
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _apfel.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _apfel.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _apfel.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _apfel.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _apfel.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _apfel.SwigPyIterator_equal(self, x)

    def copy(self):
        return _apfel.SwigPyIterator_copy(self)

    def next(self):
        return _apfel.SwigPyIterator_next(self)

    def __next__(self):
        return _apfel.SwigPyIterator___next__(self)

    def previous(self):
        return _apfel.SwigPyIterator_previous(self)

    def advance(self, n):
        return _apfel.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _apfel.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _apfel.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _apfel.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _apfel.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _apfel.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _apfel.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _apfel.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def InitializeAPFEL():
    return _apfel.InitializeAPFEL()
InitializeAPFEL = _apfel.InitializeAPFEL

def EvolveAPFEL(Q0, Q):
    return _apfel.EvolveAPFEL(Q0, Q)
EvolveAPFEL = _apfel.EvolveAPFEL

def xPDF(i, x):
    return _apfel.xPDF(i, x)
xPDF = _apfel.xPDF

def dxPDF(i, x):
    return _apfel.dxPDF(i, x)
dxPDF = _apfel.dxPDF

def xPDFj(i, x):
    return _apfel.xPDFj(i, x)
xPDFj = _apfel.xPDFj

def xgamma(x):
    return _apfel.xgamma(x)
xgamma = _apfel.xgamma

def xgammaj(x):
    return _apfel.xgammaj(x)
xgammaj = _apfel.xgammaj

def dxgamma(x):
    return _apfel.dxgamma(x)
dxgamma = _apfel.dxgamma

def ExternalEvolutionOperator(fname, i, j, x, beta):
    return _apfel.ExternalEvolutionOperator(fname, i, j, x, beta)
ExternalEvolutionOperator = _apfel.ExternalEvolutionOperator

def LHAPDFgrid(Nrep, Qin, fname):
    return _apfel.LHAPDFgrid(Nrep, Qin, fname)
LHAPDFgrid = _apfel.LHAPDFgrid

def LHAPDFgridDerivative(Nrep, fname):
    return _apfel.LHAPDFgridDerivative(Nrep, fname)
LHAPDFgridDerivative = _apfel.LHAPDFgridDerivative

def AlphaQCD(Q):
    return _apfel.AlphaQCD(Q)
AlphaQCD = _apfel.AlphaQCD

def AlphaQED(Q):
    return _apfel.AlphaQED(Q)
AlphaQED = _apfel.AlphaQED

def HeavyQuarkMass(arg1, arg2):
    return _apfel.HeavyQuarkMass(arg1, arg2)
HeavyQuarkMass = _apfel.HeavyQuarkMass

def NPDF(i, N):
    return _apfel.NPDF(i, N)
NPDF = _apfel.NPDF

def Ngamma(N):
    return _apfel.Ngamma(N)
Ngamma = _apfel.Ngamma

def LUMI(i, j, S):
    return _apfel.LUMI(i, j, S)
LUMI = _apfel.LUMI

def xGrid(alpha):
    return _apfel.xGrid(alpha)
xGrid = _apfel.xGrid

def nIntervals():
    return _apfel.nIntervals()
nIntervals = _apfel.nIntervals

def GetVersion():
    return _apfel.GetVersion()
GetVersion = _apfel.GetVersion

def CleanUp():
    return _apfel.CleanUp()
CleanUp = _apfel.CleanUp

def EnableWelcomeMessage(arg1):
    return _apfel.EnableWelcomeMessage(arg1)
EnableWelcomeMessage = _apfel.EnableWelcomeMessage

def EnableEvolutionOperator(arg1):
    return _apfel.EnableEvolutionOperator(arg1)
EnableEvolutionOperator = _apfel.EnableEvolutionOperator

def LockGrids(arg1):
    return _apfel.LockGrids(arg1)
LockGrids = _apfel.LockGrids

def SetTimeLikeEvolution(arg1):
    return _apfel.SetTimeLikeEvolution(arg1)
SetTimeLikeEvolution = _apfel.SetTimeLikeEvolution

def SetFastEvolution(arg1):
    return _apfel.SetFastEvolution(arg1)
SetFastEvolution = _apfel.SetFastEvolution

def SetSmallxResummation(arg1, la):
    return _apfel.SetSmallxResummation(arg1, la)
SetSmallxResummation = _apfel.SetSmallxResummation

def SetAlphaQCDRef(alpharef, Qref):
    return _apfel.SetAlphaQCDRef(alpharef, Qref)
SetAlphaQCDRef = _apfel.SetAlphaQCDRef

def SetAlphaQEDRef(alpharef, Qref):
    return _apfel.SetAlphaQEDRef(alpharef, Qref)
SetAlphaQEDRef = _apfel.SetAlphaQEDRef

def SetAlphaEvolution(evol):
    return _apfel.SetAlphaEvolution(evol)
SetAlphaEvolution = _apfel.SetAlphaEvolution

def SetLambdaQCDRef(lambdaref, nref):
    return _apfel.SetLambdaQCDRef(lambdaref, nref)
SetLambdaQCDRef = _apfel.SetLambdaQCDRef

def SetPDFEvolution(evolp):
    return _apfel.SetPDFEvolution(evolp)
SetPDFEvolution = _apfel.SetPDFEvolution

def SetQLimits(Qmin, Qmax):
    return _apfel.SetQLimits(Qmin, Qmax)
SetQLimits = _apfel.SetQLimits

def SetFFNS(nfl):
    return _apfel.SetFFNS(nfl)
SetFFNS = _apfel.SetFFNS

def SetGridParameters(i, np, deg, x):
    return _apfel.SetGridParameters(i, np, deg, x)
SetGridParameters = _apfel.SetGridParameters

def SetExternalGrid(i, np, deg, x):
    return _apfel.SetExternalGrid(i, np, deg, x)
SetExternalGrid = _apfel.SetExternalGrid

def SetMaxFlavourAlpha(nf):
    return _apfel.SetMaxFlavourAlpha(nf)
SetMaxFlavourAlpha = _apfel.SetMaxFlavourAlpha

def SetMaxFlavourPDFs(nf):
    return _apfel.SetMaxFlavourPDFs(nf)
SetMaxFlavourPDFs = _apfel.SetMaxFlavourPDFs

def SetMSbarMasses(mc, mb, mt):
    return _apfel.SetMSbarMasses(mc, mb, mt)
SetMSbarMasses = _apfel.SetMSbarMasses

def SetNumberOfGrids(n):
    return _apfel.SetNumberOfGrids(n)
SetNumberOfGrids = _apfel.SetNumberOfGrids

def SetPDFSet(name):
    return _apfel.SetPDFSet(name)
SetPDFSet = _apfel.SetPDFSet

def SetPerturbativeOrder(pto):
    return _apfel.SetPerturbativeOrder(pto)
SetPerturbativeOrder = _apfel.SetPerturbativeOrder

def SetPoleMasses(mc, mb, mt):
    return _apfel.SetPoleMasses(mc, mb, mt)
SetPoleMasses = _apfel.SetPoleMasses

def SetRenFacRatio(ratio):
    return _apfel.SetRenFacRatio(ratio)
SetRenFacRatio = _apfel.SetRenFacRatio

def SetReplica(nr):
    return _apfel.SetReplica(nr)
SetReplica = _apfel.SetReplica

def SetTheory(theory):
    return _apfel.SetTheory(theory)
SetTheory = _apfel.SetTheory

def SetVFNS():
    return _apfel.SetVFNS()
SetVFNS = _apfel.SetVFNS

def DIS_xsec(x, qi, qf, y, pol, proc, scheme, pto, pdfset, irep, target, proj, F2, F3, FL, sigma):
    return _apfel.DIS_xsec(x, qi, qf, y, pol, proc, scheme, pto, pdfset, irep, target, proj, F2, F3, FL, sigma)
DIS_xsec = _apfel.DIS_xsec
# This file is compatible with both classic and new-style classes.


